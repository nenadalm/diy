#!/usr/bin/env php
<?php

require_once __DIR__ . '/../vendor/autoload.php';

use Github\Client;

define('GITHUB_USERNAME', 'nenadalm');
define('GITHUB_REPOSITORY', 'diy');
define('GITHUB_BRANCH', 'master');

define('TEMPLATES_DIR', __DIR__ . '/../src/Resources/views');
define('TEMP_DIR', __DIR__ . '/../tmp');
define('WEB_DIR', __DIR__ . '/../web');

//$github = new GithubApi(new Client(), new RepositoryInfo(GITHUB_USERNAME, GITHUB_REPOSITORY, GITHUB_BRANCH));

htmlFromMarkdown();

$twig = new Twig_Environment(new Twig_Loader_Filesystem(TEMPLATES_DIR));
$nav = createNav();
file_put_contents(
    st::concat(WEB_DIR, '/index.html'),
    $twig->render('index.html.twig', ['links' => createNav()])
);

$subNav = array_map(
    function (array $link) {
        $link['link'] = st::concat('../', $link['link']);

        return $link;
    },
    $nav
);

foreach ($nav as $link) {
    $file = st::concat(WEB_DIR, '/', ar::get($link, 'label'), '/README.html');
    $dir = dirname($file);
    if (!is_dir($dir)) {
        mkdir($dir, 0777, true);
    }

    file_put_contents(
        $file,
        $twig->render(
            'base.html.twig',
            [
                'title' => ar::get($link, 'label'),
                'content' => contentFromLink($link),
                'links' => $subNav,
            ]
        )
    );
}

function contentFromLink(array $link) {
     return file_get_contents(
        fn::thread(
            ar::get($link, 'link'),
            fn::partial('st::concat', TEMP_DIR, '/')
        )
    );
}

function createNav() {
    return array_merge(
        array_filter(
            array_map(
                function ($project) {
                    return [
                        'link'  => st::concat($project, '/README.html'),
                        'label' => $project,
                    ];
                },
                scandir(TEMP_DIR)
            ),
            fn::comp(
                'is_file',
                fn::partial('st::concat', TEMP_DIR, '/'),
                fn::partial('ar::get', fn::ARG_PLACEHOLDER, 'link')
            )
        )
    );
}


function htmlFromMarkdown() {
    $client = new Client();
    /* @var $contents Github\Api\Repository\Contents */
    $contents = $client->api('repo')->contents();

    $parsedown = new Parsedown();
    array_map(
        function ($path) use ($parsedown, $contents) {
            $html = fn::thread(
                call_user_func(
                    [$contents, 'download'],
                    GITHUB_USERNAME,
                    GITHUB_REPOSITORY,
                    $path,
                    GITHUB_BRANCH
                ),
                [$parsedown, 'text']
            );

            $file = TEMP_DIR . '/' . str_replace('.md', '.html', $path);
            echo sprintf('Generating file %s ...', $file);
            $dir = dirname($file);
            if (!file_exists($dir)) {
                mkdir($dir, 0777, true);
            }
            file_put_contents($file, $html);
        },
        array_filter(
            array_map(
                fn::partial('st::concat', fn::ARG_PLACEHOLDER, '/README.md'),
                array_column(
                    array_filter(
                        $contents->show(GITHUB_USERNAME, GITHUB_REPOSITORY, null, GITHUB_BRANCH),
                        fn::comp(
                            fn::partial('op::same', 'dir'),
                            fn::partial('ar::get', fn::ARG_PLACEHOLDER, 'type')
                        )
                    ),
                    'path'
                )
            ),
            fn::partial([$contents, 'exists'], GITHUB_USERNAME, GITHUB_REPOSITORY, fn::ARG_PLACEHOLDER, GITHUB_BRANCH)
        )
    );

    echo "\n";
}

class RepositoryInfo {
    private $username;
    private $repository;
    private $branch;
    
    public function __construct($username, $repository, $branch)
    {
        $this->username = $username;
        $this->repository = $repository;
        $this->branch = $branch;
    }

    function getUsername()
    {
        return $this->username;
    }

    function getRepository()
    {
        return $this->repository;
    }

    function getBranch()
    {
        return $this->branch;
    }
}

class GithubApi
{
    /** @var Client */
    private $client;
    
    /** @var RepositoryInfo */
    private $repositoryInfo;

    public function __construct(Client $client, RepositoryInfo $repositoryInfo)
    {
        $this->client = $client;
        $this->repositoryInfo = $repositoryInfo;
    }

    /**
     * @return Project[]
     */
    public function getProjects()
    {
        return array_map(
            'Project::createFromGithubApi',
            array_filter(
                $this->getContents()->show(
                    $this->repositoryInfo->getUsername(),
                    $this->repositoryInfo->getRepository(),
                    null,
                    $this->repositoryInfo->getBranch()
                ),
                fn::comp(
                    fn::partial('op::same', 'dir'),
                    fn::partial('ar::get', fn::ARG_PLACEHOLDER, 'type')
                )
            )
        );
    }

    /**
     * @return \Github\Api\Repository\Contents
     */
    private function getContents()
    {
        return $this->client->api('repo')->contents();
    }
}

class Project {
    private $name;
    private $path;

    public static function createFromGithubApi(array $data)
    {
        $this->name = ar::get($data, 'name');
        $this->path = ar::get($data, 'path');
    }

    function getName()
    {
        return $this->name;
    }

    function getPath()
    {
        return $this->path;
    }
}
