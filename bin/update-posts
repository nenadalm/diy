#!/usr/bin/env php
<?php

require_once __DIR__ . '/../vendor/autoload.php';

use Github\Client;

define('GITHUB_USERNAME', 'nenadalm');
define('GITHUB_REPOSITORY', 'diy');
define('GITHUB_BRANCH', 'master');

define('TEMPLATES_DIR', __DIR__ . '/../src/Resources/views');
define('TEMP_DIR', __DIR__ . '/../tmp');
define('WEB_DIR', __DIR__ . '/../web');

downloadReadmes();

function downloadReadmes()
{
    $client = new Client();
    /* @var $contents Github\Api\Repository\Contents */
    $contents = $client->api('repo')->contents();

    $template = <<<TEMPLATE
title: {{ title }}
date: {{ date }}
tags:
---
{{ content }}
TEMPLATE;

    $replacements = [
        '{{ date }}' => date('Y-m-d H:i:s'),
    ];

    array_map(
        function ($path) use ($contents, $replacements, $template) {
            file_put_contents(
                st::concat(__DIR__, '/../source/_posts/', basename(dirname($path)), '.md'),
                strtr(
                    $template,
                    array_merge(
                        $replacements,
                        [
                            '{{ title }}' => ucfirst(basename(dirname($path))),
                            '{{ content }}' => call_user_func(
                                [$contents, 'download'],
                                GITHUB_USERNAME,
                                GITHUB_REPOSITORY,
                                $path,
                                GITHUB_BRANCH
                            )
                        ]
                    )
                )
            );
        },
        array_filter(
            array_map(
                fn::partial('st::concat', fn::ARG_PLACEHOLDER, '/README.md'),
                array_column(
                    array_filter(
                        $contents->show(GITHUB_USERNAME, GITHUB_REPOSITORY, null, GITHUB_BRANCH),
                        fn::comp(
                            fn::partial('op::same', 'dir'),
                            fn::partial('ar::get', fn::ARG_PLACEHOLDER, 'type')
                        )
                    ),
                    'path'
                )
            ),
            fn::partial([$contents, 'exists'], GITHUB_USERNAME, GITHUB_REPOSITORY, fn::ARG_PLACEHOLDER, GITHUB_BRANCH)
        )
    );
}

class RepositoryInfo {
    private $username;
    private $repository;
    private $branch;
    
    public function __construct($username, $repository, $branch)
    {
        $this->username = $username;
        $this->repository = $repository;
        $this->branch = $branch;
    }

    function getUsername()
    {
        return $this->username;
    }

    function getRepository()
    {
        return $this->repository;
    }

    function getBranch()
    {
        return $this->branch;
    }
}

class GithubApi
{
    /** @var Client */
    private $client;
    
    /** @var RepositoryInfo */
    private $repositoryInfo;

    public function __construct(Client $client, RepositoryInfo $repositoryInfo)
    {
        $this->client = $client;
        $this->repositoryInfo = $repositoryInfo;
    }

    /**
     * @return Project[]
     */
    public function getProjects()
    {
        return array_map(
            'Project::createFromGithubApi',
            array_filter(
                $this->getContents()->show(
                    $this->repositoryInfo->getUsername(),
                    $this->repositoryInfo->getRepository(),
                    null,
                    $this->repositoryInfo->getBranch()
                ),
                fn::comp(
                    fn::partial('op::same', 'dir'),
                    fn::partial('ar::get', fn::ARG_PLACEHOLDER, 'type')
                )
            )
        );
    }

    /**
     * @return \Github\Api\Repository\Contents
     */
    private function getContents()
    {
        return $this->client->api('repo')->contents();
    }
}

class Project {
    private $name;
    private $path;

    public static function createFromGithubApi(array $data)
    {
        $this->name = ar::get($data, 'name');
        $this->path = ar::get($data, 'path');
    }

    function getName()
    {
        return $this->name;
    }

    function getPath()
    {
        return $this->path;
    }
}
